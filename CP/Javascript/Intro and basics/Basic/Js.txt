//Js the language : Code likhna seekhna, main features
//JS the DOM : COde likhkar cheezein banana seekhna

    1. Basics : file connect karna, load karna script ko, basics of code execution, grammar & understanding of errors..
    -> It follows the sequence of line of code in JS.

    2. Inbuilt Features => Console, alert, prompt,
    -> Browser 
    
    3. Variables :
    var a = 3;

    4. Constants :
        const c = '5;
        const d = 'apple';

    5. Compiler & Interpreters :


    6. Window : It is a bucket of tools that browser offers to use in JS language.
    
    7. Types : Types means data types.
        ->like will u have dinner ? Y or N
        - String : 'Harsh';
        - Integer : 12;
        - float : 12.42;
        - boolean : True/False;
        - character : a,b,c,...;

        Type is of two types : 
            a. Primitive DataTypes -->12,12.4,Harsh, True or false, a, null, undefined.
            b. Reference DataTypes --> [], {},() these are called as reference DataTypes.


    8. Conditionals
    9. Loops
    10. FUnctions :
        --> Functions are reusable, first class functions in js as they can work as a Variables
        -->Js is divided into two parts as a.ES5 and b.ES6
        - ES5 is divided into three parts :
            1. Simple Function Statement
            2. Function Expression
            3. Anonymous functions
        - ES6 :
            ->1. Fat Arrow Functions 
                    - a. Basic Fat Arrow Functions
                    - b. Fat Arrow functions with one parameter
                    - c. Fat arrow function with implicit returns.

    
    ##return : every functions returns something and it is undefined if return is not given

            ex:
                var aa = ()=>{
                    return 12;
                }
                aa();
                o/p: 12

    ## Rest parameter : 
        function abs(a,b,c,...){
            log("Heyy")
        }
    ## Hoisting : the declaration will move to the high as var a;
        Ex : Console.log(a);
             var a = 10;  ---> var a, a=10;

             Output Value will be undefined

    ## IIFE : Immediately Invoked Function Expression.
        --> It will wrapped under the small brackets () and then it run immediately by calling the function as ();
        ->      (function abcd(){
                    Console.log("Heyy);
                }) ();

       --> It keeps the data or variables private does not expose globally

    


    ## HOFS : When the function returns a function and accept the function in it's parameter as a value from the argument.

    ## Callback Functions :
        - Kissi function mae jou function pass hota hai call karte waqt ussey call back funcion kehtehai
        - Agar ek function mein parmeter sae function pass kiya jou pass kiya wou hai callback function aur jismein pass kiya wou hai HOFS.

            function abcd(val){
                let b = val + 1;
            }
            abcd(function(){
                let val = 8;
            })

    ## Temporal Dead Zone :

    ## First Class Functions : The function can be treated as value.
    ## Pure Function : 
        - Ek aisa function without external side effect
            function add(a,b){
                return a+b;  // no external modification
            }
            log(add(5,3))  //3+5=8
    
    ## Impure Function  : Aek aisa function jo ki change karee external variables yes with the modification of external effect.
    let total = 3;
    function totototal(val){
        total += val;
    }
    totototal(3);
    Console.log(total);

    ## Scoping : global, local,...
        -> If a variable is directly written in a code not under anything it is Global Scope.
        -> Inside a function or brackets. It is local variables. And we cannot access them directly anywhere.


    ##undefined, not defined, null :
        ->  Undefined : It is a value
        -> not defined : error
        -> null : value

    
    ## Map, Filter, Reduce :
        Ⓜ️ Map : (Ek new array banta hai jabh bhi hum use karte hai .map ka)
                - Jabh bhi aek array ko aap loop karte ho aur ek naaye array mein aapko elements put karne ho toh aap map use kargogae.
                - Map aek naya array banata hai and us array mein harbaar element leke atta hai jou map ke andar sae return hoga.
                - Return is important to be used
                -> Map loop karta hai and har baar returned value ko ek naaye array mein push kar detta hai.
                -> Map dekhte hi new array banav man mae.
                -> Naaye array mein returned value daalo.

        🔍 Filter : (Ek naaya array banta hai jabh bhi hum use karte hai .filter ka)
                    -> .filter use kiya aek naaya array manmae banna lo.
                    -> return karta hai true or false.
                    -> Naaye array mein true returned value daalo.

        ®️ Reduced : ()
                    -> Ek array sae koi aek value banao



    11. Arrays :
        -> More than similar values of one or more can be keep under a [] together. 
        -> Array is a data structure that can stores multiple values at once.
        -> For mare than one value to be store.
        -> Access the memory of array : let arr = [1,2,3,4,5]; => arr[2]=> o/p: 3 Since Indexing from zero.
        -> Methods of writting the array as :
            let arr = [1,2,3,4];
            let arr2 = new Array();  //for new blank array
            arr[4]=12;
        -> We can also stores multiple type of data types in arrays.

    12. Objects :
        -> Individual data details 
        -> To hold the key value pairs.
        -> let obj = {
            property:value,
            property:value,
            .
            .
            .
        }
        -> Jabh bhi aapko aek sae jyada values ko "ek hi element ke baare mein store karna ho."
        -> When u want to store the info of one entity.
        -> How to create an object :
            let obj = {
                property:value
            }
            let obj2 = new Object();
        -> How to access an object : objname.property();

    13. Prototypes
    14. Prototypal inheritance 
    15. Synchronous and Asynchronous JS
    16. ES6 Climax
    17. Questions solving
    ## Interview prep : 
    This, call, apply, bind    ✅
    13. Prototyps ✅
    14. Prototypal inheritance
    Closures, ✅
    Event delegations, ✅
    Higher- Order Functions, ✅
    Error Handlings (try .... catch blocks) , ✅
    Custom Events ✅

- Made by Branden EIg in only 20 days and to keep up with the issue community came to known as ECMASCRIPT.
- Which handles the bug solving, Updation features and over all development.
- JS launched two Versions as ES5 and ES6.
Known as ES5 and before, And ES6 and after. Example : var in ES5 and let in ES6.
And in chrome browser both the features has been installed.


## JS THE DOM :

DOM : Document Object Model (To change the webpage accordingly with the js. As the html doesn't have a feature which can change it's properties in one click.)

    1. Accessing Elements : ✅
        document.queryselector(' ')

    2. Modifying Elements :  ✅
        innerHtml, textContent

    3. Manipulating styles and classes :  ✅
        - style
        - classList
        - remove

    4. Creating and deleting Element : ✅
        - createElement()
        - apprendChild()
        - removeChild()


    5. Event Handling :   ✅
            - addEventListener() 


    6. Event Object  ✅



## Questions Solving :

1. Create an HTML Page with a button. When the button is clicked, change the text of the paragraph element. ✅

2. Create a page with two images and a button. When the button is clicked, swap the source attribute of the images.  ✅

3. Create a form with input field and a submit button.Use javascript to validate the form and display an error message if the input is invalid.  ✅

4. Create an unordered list. Allow users to add and remove list items dynamically using buttons. ✅



 

    

## Practice short questions :

1. log "Hello world" to the console in different ways ✅
2. Perform 35*2-(10/2)+7 and log the result ✅
3. Log the data types of "123",123, true and null using typeof ✅
4. Write a program that swaps the values of two variables ✅
5. Use console.group() to organize the logs into a group. ✅
6. Declare a const object, modify its properties and log the updated object. ✅
7. Convert "50" (string) into a number using three different method ✅
8. Check if javascript contains "script" without using .includes(). ✅
9. Create an array of 5 numbers and log the sum using .reduce(). ✅
10. Explain the difference between undefined, null, NaN. ✅
## Loops :
11. Write a for loop to print numbers from 10 to 1 in reverse ✅
12. Use a while loop to print multiples of 3 from 3 to 30. ✅
13. Write a program to calculate the sum of numbers from 1 to 100 using a loop ✅
14. Create a nested loop to print a star pattern. 
15. Use a for...of loop to iterate over the string "JavaScript". ✅

## Arrays : By using in-built method for now 😄

16. Remove Duplicate values from an array ✅
17. Find the second largest number in an array. ✅
Uniqueness, sorting array in dexcending Order[5,4,3,2,1] by b-a & ascending order as: a-b, Indexing from 1st arr[1]

18. Reverse an array without using .reverse(). ✅
19. Find the most frequent element in an array. ✅

## JavaScript Advanced HOFs, Callbacks, and Closures :

20. Create a function that takes another function as an argument and calls it after 3 seconds (HOF + Callback). ✅

21. Implement ur own version of .map() as a higher-order function ✅

//ek function banao jou ki accept karre array and accept karre ki kya chalana hai har function ki value par

22. Write a function that uses closures to create a counter. ✅

23. Implement a function that limits how many times another function can be called.(Closure + HOF). ✅

24. Create a function that takes a callback and executes it after every `n` seconds indefinitely ✅

25. Implement a function that returns a function with a preset greetings.(Closures) ✅

26. Implement a function that takes a callback and only executes it once.(HOF + closures) ✅

27. Implement  a function that throttles another function (HOF + Closure) ✅



📌D.S.A (DATA STRUCTURE AND ALGORITHM) :
